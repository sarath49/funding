<?php

/**
 * @file
 * Provide funding field, yaml formatters and widgets for crowdfunding.
 */

use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;

/**
 * Implements hook_help().
 */
function funding_help($path, $arg) {
  switch ($path) {
    case 'admin/help#funding':
      return t("Provide a funding YAML field, formatters and widgets for OpenCollective, Patreon and similar platforms.");
  }
}

/**
 * Implements hook_field_info().
 *
 * Provides the description of the funding field.
 */
function funding_field_info() {
  return [
    'funding' => [
      'label' => t('Funding YAML'),
      'description' => t('Accepts YAML describing crowdfunding accounts.'),
      'default_widget' => 'funding',
      'default_formatter' => 'funding_text',
    ],
  ];
}

/**
 * Implements hook_field_validate().
 */
function funding_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    $message = '';
    if (!empty($item['value'])) {
      try {
        $items = Yaml::parse($item['value']);
        if (is_array($items)) {
          foreach ($items as $provider => $username) {
            if (is_array($username) && !isset($username['slug'])) {
              $message = t('No "slug:" provided for array: %provider', ['%provider', $provider]);
            }
            elseif (empty($username)) {
              $message = t('No username provided for provider: %provider', ['%provider', $provider]);;
            }
          }
        }
        else {
          $message = t('Unable to parse the YAML array. Please check the format and try again.');
        }
      }
      catch (ParseException $e) {
        $message = t('Unable to parse the YAML string: %message', ['%message', $e->getMessage()]);
      }
    }

    if ($message) {
      $errors[$field['field_name']][$langcode][$delta][] = [
        'error' => 'funding_invalid',
        'message' => $message,
      ];
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function funding_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 */
function funding_field_formatter_info() {
  return [
    'funding_text' => [
      'label' => t('Funding text box'),
      'field types' => [
        'funding',
      ],
      'settings' => [
        'widget' => array('funding_text_widgets' => NULL),
      ]
    ],
    'funding_providers' => [
      'label' => t('Funding buttons'),
      'field types' => [
        'funding',
      ],
      'settings' => [
        'widget' => array('funding_providers_widgets' => NULL),
      ]
    ],
  ];
}

/**
 * Implements hook_field_formatter_view().
 *
 * e.g.
 * open_collective-js:
 *   slug: portland-drupal
 *   verb: donate
 *   color: blue
 * open_collective-img:
 *   slug: portland-drupal
 *   verb: contribute
 *   color: white
 */
function funding_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = [];
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'funding_text':
      foreach ($items as $delta => $item) {
        $element[$delta] = funding_view_text(Yaml::parse($item['value']));
      }
      break;

    case 'funding_providers':
      foreach ($items as $delta => $item) {
        $element[$delta] = funding_view_providers(Yaml::parse($item['value']));
      }
      break;
  }

  return $element;
}

/**
 * Render a text block with all funding links.
 *
 * @param array $funding_config
 *   Associative array of funding providers and usernames.
 *
 * @return array
 *   Render array.
 */
function funding_view_text(array $funding_config) {

  $links = [];
  $widgets = module_invoke_all('funding_text_widgets');
  foreach ($funding_config as $provider => $config) {
    $theme = theme($widgets[$provider]['theme']['name'], ['config' => $config]);
    $links[] = theme($widgets[$provider]['theme']['name'], ['config' => $config]);
  }

  if (empty($links)) {
    return [];
  }

  // Create a plural format that can be translated.
  $last_link = array_pop($links);
  if (empty($links)) {
    $markup = t("This project is supported by a community of contributors. Visit their page on !link to learn more.", ['!link' => $last_link]);
  }
  else {
    $markup = t("This project is supported by a community of contributors. Visit their page on !links or !last_link to learn more.", [
      '!links' => implode(', ', $links),
      '!last_link' => $last_link,
    ]);
  }

  return [
    '#type' => 'markup',
    '#markup' => $markup,
    '#allowed_tags' => ['a'],
  ];
}

/**
 * Render widgets for all funding links.
 *
 * @param array $funding_config
 *   Associative array of funding providers and usernames.
 *
 * @return array
 *   Render array.
 */
function funding_view_providers(array $funding_config) {
  $element = [];
  $widgets = module_invoke_all('funding_providers_widgets');
  foreach ($funding_config as $provider => $config) {
    $element[$provider] = [
      '#theme' => $widgets[$provider]['theme']['name'],
      'config' => $config
    ];
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function funding_field_widget_info() {
  return [
    'funding' => [
      'label' => t('Funding YAML'),
      'field types' => ['funding'],
    ],
  ];
}

/**
 * Implements hook_field_widget_form().
 */
function funding_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL;

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'funding':
      $widget_type = $instance['display']['default']['type'];
      $widget_selected = [];
      if (isset($instance['display']['default']['settings']['widget']["{$widget_type}_widgets"])) {
        $widget_selected = $instance['display']['default']['settings']['widget']["{$widget_type}_widgets"];
      }
      $value = Yaml::parse($value);
      $widgets = module_invoke_all("{$widget_type}_widgets");
      $updated_value = [];
      if ($widget_type === "funding_providers") {
        foreach($widget_selected as $widget_value) {
          if(isset($widgets[$widget_value]) && isset($value[$widget_value])) {
            $updated_value[$widget_value] = $value[$widget_value];
          }
          else if ($widget_value !== 0) {
            $updated_value[$widget_value] = $widgets[$widget_value]['form'];
          }
        }
      }
      if ($widget_type === "funding_text") {
        foreach($widget_selected as $widget_value) {
          if(isset($widgets[$widget_value]) && isset($value[$widget_value])) {
            $updated_value[$widget_value] = $value[$widget_value];
          }
          else if ($widget_value !== 0) {
            $updated_value[$widget_value] = $widgets[$widget_value]['form'][$widget_value];
          }
        }
      }

      $widget += [
        '#type' => 'textarea',
        '#default_value' => !empty($updated_value) ? Yaml::dump($updated_value) : '',
        '#rows' => 5,
        '#attributes' => ['class' => ['text-funding-yaml']],
      ];
      break;
  }

  $element['value'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function funding_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'funding_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function funding_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';

  if ($display['type'] === 'funding_providers') {
    $widgets = module_invoke_all('funding_providers_widgets');
    $widget_selected = [];
    foreach($settings['widget']['funding_providers_widgets'] as $widget_key) {
      if (isset($widgets[$widget_key])) {
        $widget_selected[] = $widgets[$widget_key]['name'];
      }
    }
    $summary = t('Funding Buttons: @selected', ['@selected' => implode($widget_selected, ', ')]);
  }

  if ($display['type'] === 'funding_text') { 
    $widgets = module_invoke_all('funding_text_widgets');
    $widget_selected = [];
    foreach($settings['widget']['funding_text_widgets'] as $widget_key) {
      if (isset($widgets[$widget_key])) {
        $widget_selected[] = $widgets[$widget_key]['name'];
      }
    }
    $summary = t('Funding Text: @selected', ['@selected' => implode($widget_selected, ', ')]);
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function funding_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = [];
  
  // Funding Buttons.
  if ($display['type'] === 'funding_providers') {
    $widgets = module_invoke_all('funding_providers_widgets');
    $element['widget'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Funding Button options'),
      '#description' => t('Choose funding button options.'),
      '#weight' => -2,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $widget_elements = [];
    foreach($widgets as $widget_key => $widget_value) {
      $widget_elements[$widget_key] = $widget_value['name'];
    }

    $element['widget']['funding_providers_widgets'] = [
      '#type' => 'checkboxes',
      '#options' => $widget_elements,
      '#default_value' => isset($settings['widget']['funding_providers_widgets']) ? array_values($settings['widget']['funding_providers_widgets']) : [],
      '#attributes' => array('class' => array('funding-providers-widgets', 'clearfix')),
      '#required' => TRUE,
    ];
  }

  // Funding Text.
  if ($display['type'] === 'funding_text') {
    $widgets = module_invoke_all('funding_text_widgets');
    $element['widget'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Funding Text options'),
      '#description' => t('Choose funding text options.'),
      '#weight' => -2,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $widget_elements = [];
    foreach($widgets as $widget_key => $widget_value) {
      $widget_elements[$widget_key] = $widget_value['name'];
    }

    $element['widget']['funding_text_widgets'] = [
      '#type' => 'checkboxes',
      '#options' => $widget_elements,
      '#default_value' => isset($settings['widget']['funding_text_widgets']) ? array_values($settings['widget']['funding_text_widgets']) : [],
      '#attributes' => array('class' => array('funding-text-widgets', 'clearfix')),
      '#required' => TRUE,
    ];
  }

  return $element;
}

/**
 * Implements hook_funding_providers_widgets().
 *
 * This hook allows other modules to create additional custom widgets for
 * the fivestar module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a fivestar widget. Each value should be the name of the widget.
 */
function funding_funding_providers_widgets() {
  $widgets = &drupal_static(__FUNCTION__);
  if (!isset($widgets)) {
    $cache = cache_get(__FUNCTION__);
    if ($cache) {
      $widgets = $cache->data;
    }
  }

  if (!isset($widgets)) {
    $widgets_directory = drupal_get_path('module', 'funding') . '/widgets/buttons';
    $files = file_scan_directory($widgets_directory, '/\.yml$/');
    foreach ($files as $file) {
      $file_content = file_get_contents($file->uri);
      $file_content = Yaml::parse($file_content);
      $widgets[$file->name] = $file_content[$file->name];
    }
    cache_set(__FUNCTION__, $widgets);
  }
  return $widgets;
}

/**
 * Implements hook_funding_providers_widgets().
 *
 * This hook allows other modules to create additional custom widgets for
 * the fivestar module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of a css
 *   file for a fivestar widget. Each value should be the name of the widget.
 */
function funding_funding_text_widgets() {
  $widgets = &drupal_static(__FUNCTION__);
  if (!isset($widgets)) {
    $cache = cache_get(__FUNCTION__);
    if ($cache) {
      $widgets = $cache->data;
    }
  }

  if (!isset($widgets)) {
    $widgets_directory = drupal_get_path('module', 'funding') . '/widgets/text';
    $files = file_scan_directory($widgets_directory, '/\.yml$/');
    foreach ($files as $file) {
      $file_content = file_get_contents($file->uri);
      $file_content = Yaml::parse($file_content);
      $widgets[$file->name] = $file_content[$file->name];
    }
    cache_set(__FUNCTION__, $widgets);
  }
  return $widgets;
}

/**
 * Implements hook_theme().
 */
function funding_theme() {
  return [
    'funding_provider_open_collective_img' => [
      'render element' => 'element',
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-provider-open-collective-img',
    ],
    'funding_provider_open_collective_js' => [
      'render element' => 'element',
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-provider-open-collective-js',
    ],
    'funding_text_github' => [
      'variables' => [
        'config' => NULL
      ],
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-text-github',
    ],
    'funding_text_open_collective' => [
      'variables' => [
        'config' => NULL
      ],
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-text-open-collective',
    ],
    'funding_text_patreon' => [
      'variables' => [
        'config' => NULL
      ],
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-text-patreon',
    ],
    'funding_text_custom' => [
      'variables' => [
        'config' => NULL
      ],
      'path' => drupal_get_path('module', 'funding') . '/templates',
      'template' => 'funding-text-custom',
    ],
  ];
}